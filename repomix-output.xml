This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
go.mod
main.go
prices/go.mod
prices/main.go
recipies.go
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="prices/go.mod">
module go_intro/prices

go 1.24.5
</file>

<file path="prices/main.go">
package main

func GetPrice(recipe string) string {
	switch recipe {
	case "pasta":
		return "The price of pasta is $2.50 per pound."
	case "salad":
		return "The price of salad ingredients is approximately $3.00 per serving."
	case "soup":
		return "The price of soup ingredients is around $4.00 per serving."
	default:
		return "Sorry, I don't have a price for that recipe."
	}
}
</file>

<file path="recipies.go">
package main

import "fmt"

func PrintRecipe(food string) string {
	title := fmt.Sprintf("Here is a recipe for %s:\n", food)
	switch food {
	case "pasta":
		ingredient := "Ingredients: pasta, water, salt"
		instructions := ("Instructions: Boil water, add salt, cook pasta until al dente, drain and serve.")
		return title + ingredient + "\n" + instructions
	case "salad":
		ingredient := "Ingredients: lettuce, tomatoes, cucumbers, dressing"
		instructions := "Instructions: Chop vegetables, mix with dressing, serve chilled."
		extra := fmt.Sprintf("Enjoy your %s!", food)
		return title + ingredient + "\n" + instructions + "\n" + extra
	case "soup":
		ingredient := "Ingredients: broth, vegetables, noodles"
		instructions := "Instructions: Heat broth, add vegetables and noodles, simmer until cooked."
		extra := fmt.Sprintf("Volaa your %s! is ready", food)
		return title + ingredient + "\n" + instructions + "\n" + extra
	default:
		return fmt.Sprintf("Sorry, I don't have a recipe for %s", food)
	}
}
</file>

<file path=".gitignore">
# Binaries for programs and plugins
*.exe
*.dll
*.so
*.dylib
*.test
*.out

# Output of the go coverage tool
*.coverprofile

# Dependency directories (remove the comment below if you use Go modules)
vendor/

# Go workspace file
go.work
go.work.sum

# IDE/editor files
.vscode/
.idea/
*.swp
*.swo

# Logs
*.log
</file>

<file path="go.mod">
module jayflashy/go_intro

go 1.24.5

require rsc.io/quote v1.5.2

require (
	golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c // indirect
	rsc.io/sampler v1.3.0 // indirect
)
</file>

<file path="main.go">
package main

import (
	"fmt"

	"rsc.io/quote"
)

func main() {
	fmt.Println("Hello, World!")
	fmt.Println(quote.Go())
	pastaRecipie := PrintRecipe("pasta")
	fmt.Println(pastaRecipie)
	PrintRecipe("salad")
	soupPrice := GetPrice("soup")
	fmt.Println(soupPrice)
}
</file>

</files>
